{
  "version": 3,
  "sources": ["../lib/initialize_array_views.js", "../lib/reshape_strategy.js", "../lib/increment_offsets.js", "../lib/set_view_offsets.js", "../lib/offsets.js", "../lib/callback_wrapper.js", "../lib/2d_blocked_accessors.js", "../lib/3d_blocked_accessors.js", "../lib/4d_blocked_accessors.js", "../lib/5d_blocked_accessors.js", "../lib/6d_blocked_accessors.js", "../lib/7d_blocked_accessors.js", "../lib/8d_blocked_accessors.js", "../lib/9d_blocked_accessors.js", "../lib/10d_blocked_accessors.js", "../lib/2d_blocked.js", "../lib/3d_blocked.js", "../lib/4d_blocked.js", "../lib/5d_blocked.js", "../lib/6d_blocked.js", "../lib/7d_blocked.js", "../lib/8d_blocked.js", "../lib/9d_blocked.js", "../lib/10d_blocked.js", "../lib/0d_accessors.js", "../lib/1d_accessors.js", "../lib/2d_accessors.js", "../lib/3d_accessors.js", "../lib/4d_accessors.js", "../lib/5d_accessors.js", "../lib/6d_accessors.js", "../lib/7d_accessors.js", "../lib/8d_accessors.js", "../lib/9d_accessors.js", "../lib/10d_accessors.js", "../lib/nd_accessors.js", "../lib/0d.js", "../lib/1d.js", "../lib/2d.js", "../lib/3d.js", "../lib/4d.js", "../lib/5d.js", "../lib/6d.js", "../lib/7d.js", "../lib/8d.js", "../lib/9d.js", "../lib/10d.js", "../lib/nd.js", "../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initialize ndarray-like objects for representing zero-dimensional sub-array views of ancillary ndarray arguments.\n*\n* ## Notes\n*\n* -   This function ignores the first two ndarray-like objects, which are assumed to be the input and output ndarray, respectively.\n* -   This function mutates the provided output array.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @param {Array<Object>} out - output array\n* @returns {Array<Object>} output array\n*/\nfunction initializeViews( arrays, out ) {\n\tvar v;\n\tvar i;\n\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tv = arrays[ i ];\n\t\tout.push({\n\t\t\t'dtype': v.dtype,\n\t\t\t'data': v.data,\n\t\t\t'shape': [],\n\t\t\t'strides': [ 0 ],\n\t\t\t'offset': v.offset,\n\t\t\t'order': v.order\n\t\t});\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = initializeViews;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar minmaxViewBufferIndex = require( '@stdlib/ndarray-base-minmax-view-buffer-index' ).assign;\nvar ndarraylike2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar assign = require( '@stdlib/ndarray-base-assign' );\nvar ndarraylike2ndarray = require( '@stdlib/ndarray-base-ndarraylike2ndarray' );\nvar emptyLike = require( '@stdlib/ndarray-base-empty-like' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns an input ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} input ndarray\n*/\nfunction identity( x ) {\n\treturn x;\n}\n\n/**\n* Broadcasts a zero-dimensional ndarray to a one-dimensional ndarray view containing a single element.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @returns {ndarrayLike} broadcasted ndarray view\n*/\nfunction broadcast( x ) {\n\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\treturn {\n\t\t'dtype': x.dtype,\n\t\t'data': x.data,\n\t\t'shape': [ 1 ],\n\t\t'strides': [ 0 ],\n\t\t'offset': x.offset,\n\t\t'order': x.order\n\t};\n}\n\n/**\n* Returns a function which returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n*\n* @private\n* @param {ndarrayLike} arr - original ndarray\n* @param {NonNegativeInteger} index - index of the non-singleton dimension\n* @returns {Function} function for returning an ndarray view\n*/\nfunction squeeze( arr, index ) {\n\tvar sh = [ arr.shape[ index ] ];\n\tvar sx = [ arr.strides[ index ] ];\n\treturn reshape;\n\n\t/**\n\t* Returns an ndarray view in which the singleton dimensions are removed from an input ndarray having only a single non-singleton dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a squeezed ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// NOTE: the following properties must be set in the exact same order as in `arr` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {integer} iox - iteration order\n* @returns {Function} function for returning a one-dimensional ndarray view\n*/\nfunction contiguous( len, iox ) {\n\tvar xmmv;\n\tvar ind;\n\tvar sh;\n\tvar sx;\n\n\t// Resolve the index of the min/max view buffer element which is the first indexed element...\n\tif ( iox === 1 ) {\n\t\tind = 0;\n\t} else {\n\t\tind = 1;\n\t}\n\t// Initialize an array for storing the min/max view buffer elements:\n\txmmv = [ 0, 0 ]; // [ min, max ]\n\n\t// Initialize the output one-dimensional view's shape and strides:\n\tsh = [ len ];\n\tsx = [ iox ];\n\n\treturn reshape;\n\n\t/**\n\t* Returns a one-dimensional ndarray view of a contiguous input ndarray having more than one dimension.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} a one-dimensional ndarray view\n\t*/\n\tfunction reshape( x ) {\n\t\t// Resolve the minimum and maximum linear indices in the underlying data buffer which are accessible to the input ndarray view:\n\t\tminmaxViewBufferIndex( x.shape, x.strides, x.offset, xmmv );\n\n\t\t// NOTE: the following properties must be set in the exact same order as in `x` in order to ensure that the returned object has the same hidden shape as the input ndarray-like object...\n\t\treturn {\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': sh,\n\t\t\t'strides': sx,\n\t\t\t'offset': xmmv[ ind ], // the index of the first indexed element\n\t\t\t'order': x.order\n\t\t};\n\t}\n}\n\n/**\n* Returns a function which copies an input ndarray to a contiguous ndarray workspace.\n*\n* @private\n* @param {NonNegativeInteger} len - number of elements in an ndarray\n* @param {ndarrayLike} workspace - ndarray workspace\n* @returns {Function} function which copies an input ndarray to a contiguous ndarray workspace\n*/\nfunction copy( len, workspace ) {\n\t// NOTE: the following properties must be set in the exact same order as in the input ndarray-like object in order to ensure that the returned object has the same hidden shape...\n\tvar view = {\n\t\t'dtype': workspace.dtype,\n\t\t'data': workspace.data,\n\t\t'shape': [ len ],\n\t\t'strides': [ 1 ],\n\t\t'offset': workspace.offset,\n\t\t'order': workspace.order\n\t};\n\treturn reshape;\n\n\t/**\n\t* Copies an input ndarray to a contiguous ndarray workspace and returns a one-dimensional workspace view.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - input ndarray\n\t* @returns {ndarrayLike} one-dimensional workspace view\n\t*/\n\tfunction reshape( x ) {\n\t\tassign( [ x, workspace ] );\n\t\treturn view;\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Returns a function for reshaping input ndarrays which have the same data type, shape, and strides as a provided ndarray.\n*\n* @private\n* @param {ndarrayLike} x - input ndarray\n* @param {string} x.dtype - input ndarray data type\n* @param {Collection} x.data - input ndarray data buffer\n* @param {NonNegativeIntegerArray} x.shape - input ndarray shape\n* @param {IntegerArray} x.strides - input ndarray strides\n* @param {NonNegativeInteger} x.offset - input ndarray index offset\n* @param {string} x.order - input ndarray memory layout\n* @returns {Function} function implementing a reshape strategy\n*/\nfunction strategy( x ) {\n\tvar ndims;\n\tvar xmmv;\n\tvar len;\n\tvar iox;\n\tvar sh;\n\tvar ns;\n\tvar i;\n\n\t// Resolve the number of array dimensions:\n\tsh = x.shape;\n\tndims = sh.length;\n\n\t// Check whether the ndarray is zero-dimensional...\n\tif ( ndims === 0 ) {\n\t\treturn broadcast;\n\t}\n\t// Check whether the ndarray is already one-dimensional...\n\tif ( ndims === 1 ) {\n\t\treturn identity;\n\t}\n\t// Determine the number of singleton dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( sh[ i ] === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t\tlen *= sh[ i ];\n\t}\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can simply create an ndarray view without the singleton dimensions...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( sh[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn squeeze( x, i );\n\t}\n\tiox = iterationOrder( x.strides ); // +/-1\n\n\t// Determine whether we can avoid copying data...\n\tif ( iox !== 0 ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the ndarray view:\n\t\txmmv = minmaxViewBufferIndex( sh, x.strides, x.offset, [ 0, 0 ] );\n\n\t\t// Determine whether we can ignore shape (and strides) and create a new one-dimensional ndarray view...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) ) {\n\t\t\treturn contiguous( len, iox );\n\t\t}\n\t\t// The ndarray is non-contiguous, so we cannot directly interpret as a one-dimensional ndarray...\n\n\t\t// Fall-through to copying to a workspace ndarray...\n\t}\n\t// At this point, we're dealing with a non-contiguous multi-dimensional ndarray, so we need to copy to a contiguous workspace:\n\treturn copy( len, ndarraylike2object( emptyLike( ndarraylike2ndarray( x ) ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = strategy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Increments index offsets according to a list of increments.\n*\n* ## Notes\n*\n* -   This function mutates the list of index offsets.\n*\n* @private\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @param {NonNegativeIntegerArray} inc - list of increments\n* @returns {NonNegativeIntegerArray} updated offsets\n*/\nfunction incrementOffsets( offsets, inc ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\toffsets[ i ] += inc[ i ];\n\t}\n\treturn offsets;\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrementOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets view offsets according to a list of index offsets.\n*\n* ## Notes\n*\n* -   This function skips the second element in the list of index offsets, as that is assumed to correspond to the output ndarray which does not have a corresponding view. Meaning, the list of views is expected to have `N` elements, and the list of index offsets is expected to have `N+1` elements.\n* -   This function mutates the provides view objects.\n*\n* @private\n* @param {Array<Object>} views - list of ndarray-like objects representing ndarray views\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @returns {Array<Object>} updated views\n*/\nfunction setViewOffsets( views, offsets ) {\n\tvar i;\n\tvar j;\n\tfor ( i = 0, j = 0; i < offsets.length; i++ ) {\n\t\tif ( i === 1 ) { // note: expected to correspond to the output ndarray which does not have a corresponding view\n\t\t\tcontinue;\n\t\t}\n\t\tviews[ j ].offset = offsets[ i ];\n\t\tj += 1;\n\t}\n\treturn views;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setViewOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves index offsets from a list of ndarray-like objects.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @returns {NonNegativeIntegerArray} list of offsets\n*/\nfunction offsets( arrays ) {\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tout.push( arrays[ i ].offset );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = offsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar put = require( '@stdlib/array-base-put' );\nvar ind2sub = require( '@stdlib/ndarray-base-ind2sub' ).assign;\nvar zeros = require( '@stdlib/array-base-zeros' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Wraps a provided callback function.\n*\n* @private\n* @param {ndarray} arr - input ndarray\n* @param {ndarray} view - reduced view of the input ndarray\n* @param {NonNegativeIntegerArray} idx - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - loop dimensions\n* @param {NonNegativeIntegerArray} lidx - current loop iteration indices\n* @param {NonNegativeIntegerArray} cdims - core dimensions\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {Function} callback wrapper\n*/\nfunction wrap( arr, view, idx, ldims, lidx, cdims, clbk, thisArg ) {\n\tvar cidx = zeros( cdims.length ); // workspace for storing core iteration indices\n\tput( idx, ldims, lidx, MODE );\n\treturn wrapper;\n\n\t/**\n\t* Invokes a callback function.\n\t*\n\t* @private\n\t* @param {*} v - value\n\t* @param {NonNegativeInteger} aidx - current array element index\n\t* @returns {*} result\n\t*/\n\tfunction wrapper( v, aidx ) {\n\t\tind2sub( view.shape, view.strides, view.offset, view.order, aidx, MODE, cidx ); // eslint-disable-line max-len\n\t\tput( idx, cdims, cidx, MODE );\n\t\treturn clbk.call( thisArg, v, idx.slice(), arr );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = wrap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary2d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 6.0, 14.0, 22.0 ] ]\n*/\nfunction blockedunary2d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary3d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 8.0, 16.0, 24.0 ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar set;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary4d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary5d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary6d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary7d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary8d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary9d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8[ k ] = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary10d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9[ k ] = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8[ k ] = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j9+i9, j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary2d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 8.0, 16.0, 24.0 ] ]\n*/\nfunction blockedunary2d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary3d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 8.0, 16.0, 24.0 ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary4d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary5d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary6d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary7d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary8d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary9d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8[ k ] = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* blockedunary10d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar o;\n\tvar k;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9[ k ] = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8[ k ] = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ j9+i9, j8+i8, j7+i7, j6+i6, j5+i5, j4+i4, j3+i3, j2+i2, j1+i1, j0+i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar without = require( '@stdlib/array-base-without' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*    return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [];\n* var cdims = [ 0, 1 ];\n*\n* // Perform a reduction:\n* unary0d( maxBy, [ x, y ], strategy, ibuf, ldims, cdims, {}, false, clbk, {} );\n*\n* var v = y.data.get( 0 );\n* // returns 8.0\n*/\nfunction unary0d( fcn, arrays, strategy, ibuf, ldims, cdims, opts, hasOpts, clbk, thisArg ) {\n\tvar arr;\n\tvar x;\n\tvar y;\n\tvar f;\n\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\tf = wrap( x.ref, x, ibuf, ldims, [], cdims, clbk, thisArg );\n\n\tarr = without( arrays, 1 );\n\tarr[ 0 ] = strategy( x );\n\n\tif ( hasOpts ) {\n\t\ty.accessors[ 1 ]( y.data, y.offset, fcn( arr, opts, f ) );\n\t} else {\n\t\ty.accessors[ 1 ]( y.data, y.offset, fcn( arr, f ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0 ];\n* var cdims = [ 1, 2 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 4 ];\n*\n* // Perform a reduction:\n* unary1d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ 8.0, 16.0, 24.0 ]\n*/\nfunction unary1d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i0 ], cdims, clbk, thisArg );\n\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ): fcn( v, f ) );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* unary2d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 6.0, 14.0, 22.0 ] ]\n*/\nfunction unary2d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar set;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i1, i0 ], cdims, clbk, thisArg );\n\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary3d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 8.0, 16.0, 24.0 ] ] ]\n*/\nfunction unary3d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary4d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar set;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1]) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary5d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary6d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i5, i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary7d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i6, i5, i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary8d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i7, i6, i5, i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary9d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i8, i7, i6, i5, i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary10d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ];  // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv9.push( sv[9] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i9, i8, i7, i6, i5, i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar ind2sub = require( '@stdlib/ndarray-base-ind2sub' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( new Float64Array( [ 0.0, 0.0, 0.0 ] ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* unarynd( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 6.0, 14.0, 22.0 ] ]\n*/\nfunction unarynd( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar len;\n\tvar arr;\n\tvar sub;\n\tvar set;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar j;\n\tvar f;\n\n\tN = arrays.length;\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, arr.strides, iv[ j ], arr.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\tsub = ind2sub( sh, strides, 0, x.order, i, MODE );\n\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, sub, cdims, clbk, thisArg );\n\t\tset( ybuf, io[1], ( hasOpts ) ? fcn( views, opts, f ) : fcn( views, f ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar without = require( '@stdlib/array-base-without' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {thisArg} thisArg - callback execution context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*    return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var ybuf = new Float64Array( [ 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [];\n* var cdims = [ 0, 1 ];\n*\n* // Perform a reduction:\n* unary0d( maxBy, [ x, y ], strategy, ibuf, ldims, cdims, {}, false, clbk, {} );\n*\n* var v = y.data;\n* // returns <Float64Array>[ 8.0 ]\n*/\nfunction unary0d( fcn, arrays, strategy, ibuf, ldims, cdims, opts, hasOpts, clbk, thisArg ) {\n\tvar arr;\n\tvar x;\n\tvar y;\n\tvar f;\n\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\tf = wrap( x.ref, x, ibuf, ldims, [], cdims, clbk, thisArg );\n\n\tarr = without( arrays, 1 );\n\tarr[ 0 ] = strategy( x );\n\n\ty.data[ y.offset ] = ( hasOpts ) ? fcn( arr, opts, f ) : fcn( arr, f );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0 ];\n* var cdims = [ 1, 2 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 4 ];\n*\n* // Perform a reduction:\n* unary1d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ 8.0, 16.0, 24.0 ]\n*/\nfunction unary1d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i0 ], cdims, clbk, thisArg );\n\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* unary2d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 8.0, 16.0, 24.0 ] ]\n*/\nfunction unary2d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i1, i0 ], cdims, clbk, thisArg );\n\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2 ];\n* var cdims = [ 3, 4 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary3d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 8.0, 16.0, 24.0 ] ] ]\n*/\nfunction unary3d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3 ];\n* var cdims = [ 4, 5 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary4d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1]) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary4d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4 ];\n* var cdims = [ 5, 6 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary5d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary5d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5 ];\n* var cdims = [ 6, 7 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary6d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i5, i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary6d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6 ];\n* var cdims = [ 7, 8 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary7d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i6, i5, i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary7d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7 ];\n* var cdims = [ 8, 9 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary8d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i7, i6, i5, i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary8d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var cdims = [ 9, 10 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary9d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i8, i7, i6, i5, i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary9d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params, max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating whether the input ndarray is row-major\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var zeros = require( '@stdlib/array-base-zeros' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n* var cdims = [ 10, 11 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ];\n*\n* // Perform a reduction:\n* unary10d( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, true, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ 8.0, 16.0, 24.0 ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, isRowMajor, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar f;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ];  // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv9.push( sv[9] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\t\t\t\t\t\t\t\t\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, [ i9, i8, i7, i6, i5, i4, i3, i2, i1, i0 ], cdims, clbk, thisArg );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = ( hasOpts ) ? fcn( v, opts, f ) : fcn( v, f );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary10d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-params */\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar ind2sub = require( '@stdlib/ndarray-base-ind2sub' );\nvar copyIndexed = require( '@stdlib/array-base-copy-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\nvar wrap = require( './callback_wrapper.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray according to a callback function and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Function} strategy - input ndarray reshape strategy\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {NonNegativeIntegerArray} ibuf - workspace for storing iteration indices\n* @param {NonNegativeIntegerArray} ldims - list of loop dimensions\n* @param {NonNegativeIntegerArray} cdims - list of \"core\" dimensions\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @param {boolean} hasOpts - boolean indicating whether to pass an options argument to a reduction function\n* @param {Function} clbk - callback function\n* @param {*} thisArg - callback exection context\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Define a reshape strategy:\n* function strategy( x ) {\n*     return {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 4 ],\n*         'strides': [ 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     };\n* }\n*\n* // Create a workspace array for storing iteration indices:\n* var ibuf = zeros( xsh.length );\n*\n* // Define the loop and core dimensions:\n* var ldims = [ 0, 1 ];\n* var cdims = [ 2, 3 ];\n*\n* // Resolve the loop dimension strides for the input array:\n* var slx = [ 12, 4 ];\n*\n* // Perform a reduction:\n* unarynd( maxBy, [ x, y ], strategy, views, ibuf, ldims, cdims, slx, {}, false, clbk, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 8.0, 16.0, 24.0 ] ]\n*/\nfunction unarynd( fcn, arrays, strategy, views, ibuf, ldims, cdims, strides, opts, hasOpts, clbk, thisArg ) {\n\tvar ybuf;\n\tvar len;\n\tvar arr;\n\tvar sub;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar v;\n\tvar i;\n\tvar j;\n\tvar f;\n\n\tN = arrays.length;\n\n\t// Cache a reference to the input ndarray:\n\tx = arrays[ 0 ];\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Shallow copy the list of views to an internal array so that we can update with reshaped views without impacting the original list of views:\n\tv = copyIndexed( views );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, arr.strides, iv[ j ], arr.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tv[ 0 ] = strategy( views[ 0 ] );\n\t\tsub = ind2sub( sh, strides, 0, x.order, i, MODE );\n\t\tf = wrap( x.ref, views[ 0 ], ibuf, ldims, sub, cdims, clbk, thisArg );\n\t\tybuf[ io[1] ] = ( hasOpts ) ? fcn( v, f, opts ) : fcn( v, f );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar ndarray2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar takeIndexed2 = require( '@stdlib/array-base-take-indexed2' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar strides2order = require( '@stdlib/ndarray-base-strides2order' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\nvar initializeViews = require( './initialize_array_views.js' );\nvar reshapeStrategy = require( './reshape_strategy.js' );\nvar blockedaccessorunary2d = require( './2d_blocked_accessors.js' );\nvar blockedaccessorunary3d = require( './3d_blocked_accessors.js' );\nvar blockedaccessorunary4d = require( './4d_blocked_accessors.js' );\nvar blockedaccessorunary5d = require( './5d_blocked_accessors.js' );\nvar blockedaccessorunary6d = require( './6d_blocked_accessors.js' );\nvar blockedaccessorunary7d = require( './7d_blocked_accessors.js' );\nvar blockedaccessorunary8d = require( './8d_blocked_accessors.js' );\nvar blockedaccessorunary9d = require( './9d_blocked_accessors.js' );\nvar blockedaccessorunary10d = require( './10d_blocked_accessors.js' );\nvar blockedunary2d = require( './2d_blocked.js' );\nvar blockedunary3d = require( './3d_blocked.js' );\nvar blockedunary4d = require( './4d_blocked.js' );\nvar blockedunary5d = require( './5d_blocked.js' );\nvar blockedunary6d = require( './6d_blocked.js' );\nvar blockedunary7d = require( './7d_blocked.js' );\nvar blockedunary8d = require( './8d_blocked.js' );\nvar blockedunary9d = require( './9d_blocked.js' );\nvar blockedunary10d = require( './10d_blocked.js' );\nvar accessorunary0d = require( './0d_accessors.js' );\nvar accessorunary1d = require( './1d_accessors.js' );\nvar accessorunary2d = require( './2d_accessors.js' );\nvar accessorunary3d = require( './3d_accessors.js' );\nvar accessorunary4d = require( './4d_accessors.js' );\nvar accessorunary5d = require( './5d_accessors.js' );\nvar accessorunary6d = require( './6d_accessors.js' );\nvar accessorunary7d = require( './7d_accessors.js' );\nvar accessorunary8d = require( './8d_accessors.js' );\nvar accessorunary9d = require( './9d_accessors.js' );\nvar accessorunary10d = require( './10d_accessors.js' );\nvar accessorunarynd = require( './nd_accessors.js' );\nvar unary0d = require( './0d.js' );\nvar unary1d = require( './1d.js' );\nvar unary2d = require( './2d.js' );\nvar unary3d = require( './3d.js' );\nvar unary4d = require( './4d.js' );\nvar unary5d = require( './5d.js' );\nvar unary6d = require( './6d.js' );\nvar unary7d = require( './7d.js' );\nvar unary8d = require( './8d.js' );\nvar unary9d = require( './9d.js' );\nvar unary10d = require( './10d.js' );\nvar unarynd = require( './nd.js' );\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar ACCESSOR_UNARY = [\n\taccessorunary0d,\n\taccessorunary1d,\n\taccessorunary2d,\n\taccessorunary3d,\n\taccessorunary4d,\n\taccessorunary5d,\n\taccessorunary6d,\n\taccessorunary7d,\n\taccessorunary8d,\n\taccessorunary9d,\n\taccessorunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar BLOCKED_ACCESSOR_UNARY = [\n\tblockedaccessorunary2d, // 0\n\tblockedaccessorunary3d,\n\tblockedaccessorunary4d,\n\tblockedaccessorunary5d,\n\tblockedaccessorunary6d,\n\tblockedaccessorunary7d,\n\tblockedaccessorunary8d,\n\tblockedaccessorunary9d,\n\tblockedaccessorunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function accepting a callback and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n* @param {Options} [options] - function options\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @throws {Error} arrays must have the expected number of dimensions\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide unique dimension indices\n* @throws {Error} arrays must have the same loop dimension sizes\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*    return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1dBy( maxBy, [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 8.0, 16.0, 24.0 ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*    return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1dBy( maxBy, [ x, y ], [ 0, 1, 2, 3 ], clbk );\n*\n* var v = y.data;\n* // returns <Float64Array>[ 24.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*    return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1dBy( maxBy, [ x, y ], [], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ 2.0, 4.0 ], [ 6.0, 8.0 ] ], [ [ 10.0, 12.0 ], [ 14.0, 16.0 ] ], [ [ 18.0, 20.0 ], [ 22.0, 24.0 ] ] ]\n*/\nfunction unaryReduceStrided1dBy( fcn, arrays, dims, options, clbk, thisArg ) { // eslint-disable-line max-statements\n\tvar workspace;\n\tvar strategy;\n\tvar views;\n\tvar ndims;\n\tvar ldims;\n\tvar nargs;\n\tvar opts;\n\tvar arr;\n\tvar tmp;\n\tvar len;\n\tvar shx;\n\tvar shc;\n\tvar shl;\n\tvar iox;\n\tvar ioy;\n\tvar ord;\n\tvar FLG;\n\tvar ctx;\n\tvar sc;\n\tvar sl;\n\tvar sy;\n\tvar cb;\n\tvar d;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar K;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tnargs = arguments.length;\n\tFLG = false;\n\n\t// Case: ( fcn, arrays, dims, clbk )\n\tif ( nargs < 5 ) {\n\t\topts = {};\n\t\tcb = options;\n\t}\n\t// Case: ( fcn, arrays, dims, options, clbk, thisArg )\n\telse if ( nargs > 5 ) {\n\t\tFLG = true;\n\t\topts = options;\n\t\tcb = clbk;\n\t\tctx = thisArg;\n\t}\n\t// Case: ( fcn, arrays, dims, clbk, thisArg )\n\telse if ( isFunction( options ) ) {\n\t\topts = {};\n\t\tcb = options;\n\t\tctx = clbk;\n\t}\n\t// Case: ( fcn, arrays, dims, options, clbk )\n\telse {\n\t\tFLG = true;\n\t\topts = options;\n\t\tcb = clbk;\n\t}\n\t// Standardize ndarray meta data...\n\tN = arrays.length;\n\tarr = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tarr.push( ndarray2object( arrays[ i ] ) );\n\t}\n\t// Cache references to the input and output arrays:\n\tx = arr[ 0 ];\n\ty = arr[ 1 ];\n\n\t// Resolve the number of input array dimensions:\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Verify that we've been provided a list of unique dimension indices...\n\tM = dims.length;\n\td = normalizeIndices( dims, ndims-1 );\n\tif ( d === null ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument contains an out-of-bounds dimension index. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\td.sort();\n\tif ( d.length !== M ) {\n\t\tthrow new Error( format( 'invalid argument. Third argument must contain a list of unique dimension indices. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\t// Check whether we've been provided a valid number of dimensions to reduce...\n\tif ( M > ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of specified dimensions cannot exceed the number of dimensions in the input array. Number of dimensions: %d. Value: [%s].', ndims, join( dims, ',' ) ) );\n\t}\n\t// Verify that provided ndarrays have the expected number of dimensions...\n\tK = ndims - M;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tif ( arr[ i ].shape.length !== K ) {\n\t\t\tthrow new Error( format( 'invalid argument. Arrays which are not being reduced must have the same number of non-reduced dimensions. Input array shape: [%s]. Number of non-reduced dimensions: %d. Array shape: [%s] (index: %d).', join( shx, ',' ), K, join( arr[ i ].shape, ',' ), i ) );\n\t\t}\n\t}\n\t// Initialize a workspace for storing iteration indices:\n\tworkspace = zeros( ndims );\n\n\t// Resolve the non-reduced (\"loop\") dimensions and associated strides:\n\tldims = indicesComplement( shx.length, d );\n\ttmp = takeIndexed2( shx, x.strides, ldims );\n\tshl = tmp[ 0 ];\n\tsl = tmp[ 1 ];\n\n\t// Resolve the reduced (\"core\") dimensions and associated strides:\n\ttmp = takeIndexed2( shx, x.strides, d );\n\tshc = tmp[ 0 ];\n\tsc = tmp[ 1 ];\n\n\t// Verify that the provided arrays have the same loop dimensions...\n\tlen = 1; // number of elements\n\tfor ( i = 0; i < K; i++ ) {\n\t\ts = shl[ i ];\n\t\tfor ( j = 1; j < N; j++ ) {\n\t\t\tif ( s !== arr[ j ].shape[ i ] ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Non-reduced dimensions must be consistent across all provided arrays. Input array shape: [%s]. Non-reduced dimension indices: [%s]. Non-reduced dimensions: [%s]. Array shape: [%s] (index: %d).', join( shx, ',' ), join( ldims, ',' ), join( shl, ',' ), join( arr[ j ].shape, ',' ), j ) );\n\t\t\t}\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= s;\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 || ( shc.length && numel( shc ) === 0 ) ) {\n\t\treturn;\n\t}\n\t// Initialize ndarray-like objects for representing sub-array views...\n\tviews = [\n\t\t{\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': sc,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t}\n\t];\n\tinitializeViews( arr, views );\n\n\t// Determine the strategy for reshaping sub-array views of the input array prior to performing a reduction:\n\tstrategy = reshapeStrategy( views[ 0 ] );\n\n\t// Determine whether we can avoid iteration altogether...\n\tif ( K === 0 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, strategy, workspace, ldims, d, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, strategy, workspace, ldims, d, opts, FLG, cb, ctx );\n\t}\n\t// Determine whether we only have one loop dimension and can thus readily perform one-dimensional iteration...\n\tif ( K === 1 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, strategy, workspace, views, ldims, d, sl, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, strategy, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t}\n\tsy = y.strides;\n\tiox = iterationOrder( sl ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tord = strides2order( sl );\n\tif ( iox !== 0 && ioy !== 0 && ord === strides2order( sy ) && K <= MAX_DIMS ) {\n\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides) and the memory layouts are the same, we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, strategy, views, workspace, ldims, d, sl, ord === 1, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, strategy, views, workspace, ldims, d, sl, ord === 1, opts, FLG, cb, ctx );\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( K <= MAX_DIMS ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_UNARY[ K-2 ]( fcn, arr, strategy, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t\t}\n\t\treturn BLOCKED_UNARY[ K-2 ]( fcn, arr, strategy, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( y.accessorProtocol ) {\n\t\treturn accessorunarynd( fcn, arr, strategy, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n\t}\n\tunarynd( fcn, arr, strategy, views, workspace, ldims, d, sl, opts, FLG, cb, ctx );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unaryReduceStrided1dBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar reduce = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Return a function for performing a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function accepting a callback and assigning results to a provided output ndarray.\n*\n* @param {Function} fcn - wrapper for a one-dimensional strided array reduction function\n* @throws {TypeError} first argument must be a function\n* @returns {Function} function for performing a reduction\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var max = factory( maxBy );\n* // returns <Function>\n*\n* // Perform a reduction:\n* max( [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 8.0, 16.0, 24.0 ] ]\n*/\nfunction factory( fcn ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\treturn reducer;\n\n\t/**\n\t* Performs a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function according to a callback function and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n\t* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n\t* @param {Options} [options] - function options\n\t* @param {Function} clbk - callback function\n\t* @param {thisArg} [thisArg] - callback execution context\n\t* @returns {void}\n\t*/\n\tfunction reducer( arrays, dims, options, clbk, thisArg ) {\n\t\tvar nargs = arguments.length;\n\t\tif ( nargs < 4 ) {\n\t\t\treturn reduce( fcn, arrays, dims, options );\n\t\t}\n\t\tif ( nargs === 4 ) {\n\t\t\treturn reduce( fcn, arrays, dims, options, clbk );\n\t\t}\n\t\treturn reduce( fcn, arrays, dims, options, clbk, thisArg );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform a reduction over a list of specified dimensions in an input ndarray via a one-dimensional strided array reduction function accepting a callback and assign results to a provided output ndarray.\n*\n* @module @stdlib/ndarray-base-unary-reduce-strided1d-by\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n* var unaryReduceStrided1dBy = require( '@stdlib/ndarray-base-unary-reduce-strided1d-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceStrided1dBy( wrapper, [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var maxBy = require( '@stdlib/stats-base-ndarray-max-by' );\n* var unaryReduceStrided1dBy = require( '@stdlib/ndarray-base-unary-reduce-strided1d-by' );\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var max = unaryReduceStrided1dBy.factory( maxBy );\n* // returns <Function>\n*\n* // Perform a reduction:\n* max( [ x, y ], [ 2, 3 ], clbk );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ 10.0, 26.0, 42.0 ] ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\" }\n"],
  "mappings": "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AS,uBAAwB,EAC1CC,GAAkB,KAClBC,GAAkB,KAClBC,GAAyB,KACzBC,GAAyB,KACzBC,GAAyB,KACzBC,GAAyB,KACzBC,GAAyB,KACzBC,GAAyB,KACzBC,GAAyB,KACzBC,GAAyB,KACzBC,GAA0B,KAC1BC,GAAiB,KACjBC,GAAiB,KACjBC,GAAiB,KACjBC,GAAiB,KACjBC,GAAiB,KACjBC,GAAiB,KACjBC,GAAiB,KACjBC,GAAiB,KACjBC,GAAkB,KAClBC,GAAkB,KAClBC,GAAkB,KAClBC,GAAkB,KAClBC,GAAkB,KAClBC,GAAkB,KAClBC,GAAkB,KAClBC,GAAkB,KAClBC,GAAkB,KAClBC,GAAkB,KAClBC,GAAkB,KAClBC,GAAmB,KACnBC,GAAkB,KAClBC,GAAU,KACVC,GAAU,KACVC,GAAU,KACVC,GAAU,KACVC,GAAU,KACVC,GAAU,KACVC,GAAU,KACVC,GAAU,KACVC,GAAU,KACVC,GAAU,KACVC,GAAW,KACXC,GAAU,KAKVC,GAAQ,CACXZ,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACD,EACIG,GAAiB,CACpBzB,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACD,EACIgB,GAAgB,CACnBnC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACD,EACI4B,GAAyB,CAC5B7C,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACD,EACIsC,GAAWJ,GAAM,OAAS,EA8K9B,SAASK,GAAwBC,EAAKC,EAAQC,EAAMC,EAASC,EAAMC,EAAU,CAC5E,IAAIC,EACAC,EACAC,GACAC,GACAC,EACAC,GACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,EAgCJ,IA9BAxB,GAAQ,UAAU,OAClBW,EAAM,GAGDX,GAAQ,GACZC,EAAO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",
  "names": ["require_initialize_array_views", "__commonJSMin", "exports", "module", "initializeViews", "arrays", "out", "v", "i", "require_reshape_strategy", "__commonJSMin", "exports", "module", "iterationOrder", "minmaxViewBufferIndex", "ndarraylike2object", "assign", "ndarraylike2ndarray", "emptyLike", "identity", "x", "broadcast", "squeeze", "arr", "index", "sh", "sx", "reshape", "contiguous", "len", "iox", "xmmv", "ind", "copy", "workspace", "view", "strategy", "ndims", "ns", "i", "require_increment_offsets", "__commonJSMin", "exports", "module", "incrementOffsets", "offsets", "inc", "i", "require_set_view_offsets", "__commonJSMin", "exports", "module", "setViewOffsets", "views", "offsets", "i", "j", "require_offsets", "__commonJSMin", "exports", "module", "offsets", "arrays", "out", "i", "require_callback_wrapper", "__commonJSMin", "exports", "module", "put", "ind2sub", "zeros", "MODE", "wrap", "arr", "view", "idx", "ldims", "lidx", "cdims", "clbk", "thisArg", "cidx", "wrapper", "v", "aidx", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary2d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "set", "dv0", "dv1", "ov1", "sh", "s0", "s1", "sv", "ov", "iv", "i0", "i1", "j0", "j1", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary3d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "dv0", "dv1", "dv2", "ov1", "ov2", "set", "sh", "s0", "s1", "s2", "sv", "ov", "iv", "i0", "i1", "i2", "j0", "j1", "j2", "N", "x", "y", "v", "o", "f", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary4d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "ov1", "ov2", "ov3", "sh", "s0", "s1", "s2", "s3", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "j0", "j1", "j2", "j3", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary5d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "ov1", "ov2", "ov3", "ov4", "sh", "s0", "s1", "s2", "s3", "s4", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "j0", "j1", "j2", "j3", "j4", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary6d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "ov1", "ov2", "ov3", "ov4", "ov5", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "j0", "j1", "j2", "j3", "j4", "j5", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary7d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary8d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary9d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary10d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "ov9", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary2d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "dv0", "dv1", "ov1", "sh", "s0", "s1", "sv", "ov", "iv", "i0", "i1", "j0", "j1", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary3d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "dv0", "dv1", "dv2", "ov1", "ov2", "sh", "s0", "s1", "s2", "sv", "ov", "iv", "i0", "i1", "i2", "j0", "j1", "j2", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary4d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "ov1", "ov2", "ov3", "sh", "s0", "s1", "s2", "s3", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "j0", "j1", "j2", "j3", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary5d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "ov1", "ov2", "ov3", "ov4", "sh", "s0", "s1", "s2", "s3", "s4", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "j0", "j1", "j2", "j3", "j4", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary6d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "ov1", "ov2", "ov3", "ov4", "ov5", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "j0", "j1", "j2", "j3", "j4", "j5", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary7d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary8d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary9d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "N", "x", "y", "v", "o", "k", "f", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "copyIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "blockedunary10d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "bsize", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "ov1", "ov2", "ov3", "ov4", "ov5", "ov6", "ov7", "ov8", "ov9", "sh", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "sv", "ov", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "j0", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "N", "x", "y", "v", "o", "k", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "without", "wrap", "unary0d", "fcn", "arrays", "strategy", "ibuf", "ldims", "cdims", "opts", "hasOpts", "clbk", "thisArg", "arr", "x", "y", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary1d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "set", "dv0", "sh", "S0", "iv", "i0", "x", "y", "v", "i", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary2d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "set", "sh", "S0", "S1", "sv", "iv", "i0", "i1", "x", "y", "v", "i", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary3d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "set", "dv0", "dv1", "dv2", "sh", "S0", "S1", "S2", "sv", "iv", "i0", "i1", "i2", "x", "y", "v", "i", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary4d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "dv2", "dv3", "set", "sh", "S0", "S1", "S2", "S3", "sv", "iv", "i0", "i1", "i2", "i3", "x", "y", "v", "i", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary5d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "sh", "S0", "S1", "S2", "S3", "S4", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "x", "y", "v", "i", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary6d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "x", "y", "v", "i", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary7d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "x", "y", "v", "i", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary8d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "x", "y", "v", "i", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary9d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "x", "y", "v", "i", "f", "require_d_accessors", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary10d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "set", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "x", "y", "v", "i", "f", "require_nd_accessors", "__commonJSMin", "exports", "module", "numel", "vind2bind", "ind2sub", "copyIndexed", "zeros", "setViewOffsets", "offsets", "wrap", "MODE", "unarynd", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "len", "arr", "sub", "set", "sh", "iv", "io", "N", "x", "y", "v", "j", "f", "require_d", "__commonJSMin", "exports", "module", "without", "wrap", "unary0d", "fcn", "arrays", "strategy", "ibuf", "ldims", "cdims", "opts", "hasOpts", "clbk", "thisArg", "arr", "x", "y", "f", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary1d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "sh", "S0", "iv", "i0", "x", "y", "v", "i", "f", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary2d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "sh", "S0", "S1", "sv", "iv", "i0", "i1", "x", "y", "v", "i", "f", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary3d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "dv2", "sh", "S0", "S1", "S2", "sv", "iv", "i0", "i1", "i2", "x", "y", "v", "i", "f", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary4d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "dv2", "dv3", "sh", "S0", "S1", "S2", "S3", "sv", "iv", "i0", "i1", "i2", "i3", "x", "y", "v", "i", "f", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary5d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "sh", "S0", "S1", "S2", "S3", "S4", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "x", "y", "v", "i", "f", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary6d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "x", "y", "v", "i", "f", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary7d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "x", "y", "v", "i", "f", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary8d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "x", "y", "v", "i", "f", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary9d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "x", "y", "v", "i", "f", "require_d", "__commonJSMin", "exports", "module", "copyIndexed", "incrementOffsets", "setViewOffsets", "offsets", "wrap", "unary10d", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "isRowMajor", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "dv0", "dv1", "dv2", "dv3", "dv4", "dv5", "dv6", "dv7", "dv8", "dv9", "sh", "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "sv", "iv", "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "x", "y", "v", "i", "f", "require_nd", "__commonJSMin", "exports", "module", "numel", "vind2bind", "ind2sub", "copyIndexed", "zeros", "setViewOffsets", "offsets", "wrap", "MODE", "unarynd", "fcn", "arrays", "strategy", "views", "ibuf", "ldims", "cdims", "strides", "opts", "hasOpts", "clbk", "thisArg", "ybuf", "len", "arr", "sub", "sh", "iv", "io", "N", "y", "v", "i", "j", "require_main", "__commonJSMin", "exports", "module", "isFunction", "ndarray2object", "normalizeIndices", "indicesComplement", "takeIndexed2", "zeros", "iterationOrder", "strides2order", "numel", "join", "format", "initializeViews", "reshapeStrategy", "blockedaccessorunary2d", "blockedaccessorunary3d", "blockedaccessorunary4d", "blockedaccessorunary5d", "blockedaccessorunary6d", "blockedaccessorunary7d", "blockedaccessorunary8d", "blockedaccessorunary9d", "blockedaccessorunary10d", "blockedunary2d", "blockedunary3d", "blockedunary4d", "blockedunary5d", "blockedunary6d", "blockedunary7d", "blockedunary8d", "blockedunary9d", "blockedunary10d", "accessorunary0d", "accessorunary1d", "accessorunary2d", "accessorunary3d", "accessorunary4d", "accessorunary5d", "accessorunary6d", "accessorunary7d", "accessorunary8d", "accessorunary9d", "accessorunary10d", "accessorunarynd", "unary0d", "unary1d", "unary2d", "unary3d", "unary4d", "unary5d", "unary6d", "unary7d", "unary8d", "unary9d", "unary10d", "unarynd", "UNARY", "ACCESSOR_UNARY", "BLOCKED_UNARY", "BLOCKED_ACCESSOR_UNARY", "MAX_DIMS", "unaryReduceStrided1dBy", "fcn", "arrays", "dims", "options", "clbk", "thisArg", "workspace", "strategy", "views", "ndims", "ldims", "nargs", "opts", "arr", "tmp", "len", "shx", "shc", "shl", "iox", "ioy", "ord", "FLG", "ctx", "sc", "sl", "sy", "cb", "d", "s", "N", "M", "K", "x", "y", "i", "require_factory", "__commonJSMin", "exports", "module", "isFunction", "format", "reduce", "factory", "fcn", "reducer", "arrays", "dims", "options", "clbk", "thisArg", "nargs", "setReadOnly", "main", "factory"]
}
